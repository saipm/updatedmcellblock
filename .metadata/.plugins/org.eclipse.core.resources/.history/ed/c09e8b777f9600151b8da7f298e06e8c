package ngdemo.repositories.impl.mock;

import com.google.common.collect.Ordering;
import com.google.common.primitives.Ints;
import com.google.inject.Singleton;
import ngdemo.domain.NullDevice;
import ngdemo.domain.Testcase;
import ngdemo.repositories.contract.DeviceRepository;
import ngdemo.repositories.contract.TestcaseRepository;

import java.util.ArrayList;
import java.util.List;

@Singleton
public class TestcaseMockRepositoryImpl extends GenericMockRepository<Testcase> implements TestcaseRepository {

    private List<Testcase> testcases = new ArrayList<Testcase>();

    public TestcaseMockRepositoryImpl() {
        this.testcases = this.createTestcases();
    }

    public Testcase getById(String id) {
        for (Testcase u : this.testcases) {
            if (u.getTestcase() == id) {
                return u;
            }
        }
        return new NullTestcase();
    }

    public List<Testcase> getAll() {
        return this.testcases;
    }

    
    public Device create(Device device) {
        //device.setDevice((getCurrentMaxId() + 1));
    	device.setDevice("hello");
        this.devices.add(device);
        return device;
    }

    
    public Device update(Device device) {
        Device byId = this.getById(device.getDevice());
        //byId.setFirstName(device.getFirstName());
        //byId.setLastName(device.getLastName());
        return byId;
    }

    
    public void remove(int id) {
        Device byId = this.getById(id);
        this.devices.remove(byId);
    }

    
    public int getNumberOfDevices() {
        return this.devices.size();
    }

    private List<Testcase> createDevices() {
        int numberOfTestcases = 10;
        for (int i = 0; i < numberOfTestcases; i++) {
            Testcase testcase = new Testcase();
            testcase.setTestcase("i + 1");
          //  device.setFirstName("Foo" + (i + 1));
          //  device.setLastName("Bar" + (i + 1));
            this.testcases.add(testcase);
        }
        return this.testcases;
    }

    private String getCurrentMaxId() {
        Ordering<Testcase> ordering = new Ordering<Testcase>() {

			@Override
			public int compare(Testcase arg0, Testcase arg1) {
				// TODO Auto-generated method stub
				return 0;
			}
            
            /*public int compare(Device left, Device right) {
                return Ints.compare(left.getId(), right.getId());
            }*/
        };
        return ordering.max(this.testcases).getTestcase();
    }

	@Override
	public void remove(String id) {
		// TODO Auto-generated method stub
		
	}
}
